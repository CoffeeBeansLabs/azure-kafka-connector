"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[829],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),s=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(o),m=n,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return o?r.createElement(k,c(c({ref:t},p),{},{components:o})):r.createElement(k,c({ref:t},p))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<a;s++)c[s]=o[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},8033:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=o(7462),n=(o(7294),o(3905));const a={id:"docker-compose",title:"Docker Compose",sidebar_position:3},c="Deployment With Docker Compose",i={unversionedId:"deployment/docker-compose",id:"deployment/docker-compose",title:"Docker Compose",description:"The source code contains a Docker compose file which can be used to",source:"@site/docs/deployment/docker-compose.md",sourceDirName:"deployment",slug:"/deployment/docker-compose",permalink:"/kafka-connect-azure-blob-storage/docs/deployment/docker-compose",draft:!1,editUrl:"https://github.com/CoffeeBeansLabs/kafka-connect-azure-blob-storage/docs/deployment/docker-compose.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"docker-compose",title:"Docker Compose",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Kafka Console Script",permalink:"/kafka-connect-azure-blob-storage/docs/deployment/kafka-console-script"},next:{title:"Configuration Properties",permalink:"/kafka-connect-azure-blob-storage/docs/configuration/documentation"}},l={},s=[{value:"Building the project",id:"building-the-project",level:2},{value:"Starting Kafka services",id:"starting-kafka-services",level:2}],p={toc:s};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"deployment-with-docker-compose"},"Deployment With Docker Compose"),(0,n.kt)("p",null,"The source code contains a Docker compose file which can be used to\nrun the connector in development mode."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Running multiple connectors in distributed mode in Docker compose is ",(0,n.kt)("b",null,"not")," supported by confluent images.")),(0,n.kt)("h2",{id:"building-the-project"},"Building the project"),(0,n.kt)("p",null,"To build the project run the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"./mvnw clean install\n")),(0,n.kt)("h2",{id:"starting-kafka-services"},"Starting Kafka services"),(0,n.kt)("p",null,"To start Zookeeper and other kafka services run the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose up -d\n")),(0,n.kt)("p",null,"This will start following services:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Zookeeper"),(0,n.kt)("li",{parentName:"ul"},"Kafka broker"),(0,n.kt)("li",{parentName:"ul"},"Schema registry"),(0,n.kt)("li",{parentName:"ul"},"Kafka-Connect (Connector jar is mounted)"),(0,n.kt)("li",{parentName:"ul"},"Kafka-Connect (To be used for Datagen source connector for quickstart)")))}u.isMDXComponent=!0}}]);