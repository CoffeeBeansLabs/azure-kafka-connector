"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[651],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=a.createContext({}),s=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),k=o,m=d["".concat(i,".").concat(k)]||d[k]||p[k]||n;return r?a.createElement(m,l(l({ref:t},u),{},{components:r})):a.createElement(m,l({ref:t},u))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,l=new Array(n);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var s=2;s<n;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8807:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>n,metadata:()=>c,toc:()=>s});var a=r(7462),o=(r(7294),r(3905));const n={id:"quickstart",title:"Quickstart",sidebar_position:3},l="Quickstart",c={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Pre-requisites",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/kafka-connect-azure-blob-storage/docs/quickstart",draft:!1,editUrl:"https://github.com/CoffeeBeansLabs/kafka-connect-azure-blob-storage/docs/quickstart.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"quickstart",title:"Quickstart",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Schema File",permalink:"/kafka-connect-azure-blob-storage/docs/configuration/schema-file"},next:{title:"Changelog",permalink:"/kafka-connect-azure-blob-storage/docs/changelog"}},i={},s=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Installing Azure Storage Explorer",id:"installing-azure-storage-explorer",level:3},{value:"Run Azurite",id:"run-azurite",level:2},{value:"What is azurite?",id:"what-is-azurite",level:3},{value:"Starting blob storage service",id:"starting-blob-storage-service",level:3},{value:"Pull azurite docker image",id:"pull-azurite-docker-image",level:4},{value:"Start the blob storage service",id:"start-the-blob-storage-service",level:4},{value:"Connect to storage explorer",id:"connect-to-storage-explorer",level:3},{value:"Start docker services",id:"start-docker-services",level:2},{value:"Build jar",id:"build-jar",level:3},{value:"Run docker containers",id:"run-docker-containers",level:3},{value:"Download datagen connector",id:"download-datagen-connector",level:3},{value:"Configure datagen",id:"configure-datagen",level:3},{value:"Configure kafka-connect",id:"configure-kafka-connect",level:3},{value:"Delete connectors",id:"delete-connectors",level:3},{value:"Stop containers",id:"stop-containers",level:2}],u={toc:s};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Docker"),(0,o.kt)("li",{parentName:"ol"},"Azure storage explorer")),(0,o.kt)("h3",{id:"installing-azure-storage-explorer"},"Installing Azure Storage Explorer"),(0,o.kt)("p",null,"Install Azure storage explorer from this ",(0,o.kt)("a",{parentName:"p",href:"https://azure.microsoft.com/en-in/features/storage-explorer/"},"link")),(0,o.kt)("h2",{id:"run-azurite"},"Run Azurite"),(0,o.kt)("h3",{id:"what-is-azurite"},"What is azurite?"),(0,o.kt)("p",null,"The Azurite open-source emulator provides a free local environment for testing your Azure blob, queue storage, and table storage applications. When you're satisfied with how your application is working locally, switch to using an Azure Storage account in the cloud. The emulator provides cross-platform support on Windows, Linux, and macOS."),(0,o.kt)("h3",{id:"starting-blob-storage-service"},"Starting blob storage service"),(0,o.kt)("h4",{id:"pull-azurite-docker-image"},"Pull azurite docker image"),(0,o.kt)("p",null,"Use the below docker command to pull the latest docker image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull mcr.microsoft.com/azure-storage/azurite\n")),(0,o.kt)("h4",{id:"start-the-blob-storage-service"},"Start the blob storage service"),(0,o.kt)("p",null,"Use the below command to run the azurite with blob storage service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 10000:10000 mcr.microsoft.com/azure-storage/azurite azurite-blob --blobHost 0.0.0.0\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This will start blob storage service and listens on port ",(0,o.kt)("inlineCode",{parentName:"p"},"10000"))),(0,o.kt)("h3",{id:"connect-to-storage-explorer"},"Connect to storage explorer"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Start azure storage explorer"),(0,o.kt)("li",{parentName:"ol"},"Select resource: Local storage emulator"),(0,o.kt)("li",{parentName:"ol"},"Remove queues port and tables port and leave everything as default"),(0,o.kt)("li",{parentName:"ol"},"Click next and then connect")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Your containers will be visible under blob containers")),(0,o.kt)("h2",{id:"start-docker-services"},"Start docker services"),(0,o.kt)("p",null,"Build the jar and start up all the containers."),(0,o.kt)("h3",{id:"build-jar"},"Build jar"),(0,o.kt)("p",null,"Create jar with following command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./mvnw clean package\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Jar will be created in the target folder")),(0,o.kt)("h3",{id:"run-docker-containers"},"Run docker containers"),(0,o.kt)("p",null,"From parent directory run docker-compose."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"zookeeperk, kafka broker, schema-registry and kafka-connect and datagen services will start")),(0,o.kt)("h3",{id:"download-datagen-connector"},"Download datagen connector"),(0,o.kt)("p",null,"While containers are starting, lets download datagen connector. From parent directory on another terminal\nrun the below command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sh quickstart/install-datagen.sh\n")),(0,o.kt)("p",null,"This will download datagen source connector jar in datagen container inside confluent-hub-components folder."),(0,o.kt)("h3",{id:"configure-datagen"},"Configure datagen"),(0,o.kt)("p",null,"Datagen is a source connector which generates mock data.\nThere are quickstart scripts for generating mock data in all formats."),(0,o.kt)("p",null,"Choose the script based on the which type of data you want to produce."),(0,o.kt)("p",null,"For eg. if you want to produce Avro serialized records, run below command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Content-Type: application/json" \\\n     -d @quickstart/config/datagen/avro-format.json \\\n     http://localhost:8084/connectors\n')),(0,o.kt)("h3",{id:"configure-kafka-connect"},"Configure kafka-connect"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In a terminal run the following command"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Content-Type: application/json" \\\n     -d @quickstart/config/connector/config.json \\\n     http://localhost:8083/connectors\n')),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"Connector will be configured"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To check the installed connectors run the following command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:8083/connectors\n")))),(0,o.kt)("h3",{id:"delete-connectors"},"Delete connectors"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run below command to stop datagen connector"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE http://localhost:8084/connectors/format-avro\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run below command to stop Azure blob sink connector"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X DELETE http://localhost:8083/connectors/quickstart\n")))),(0,o.kt)("h2",{id:"stop-containers"},"Stop containers"),(0,o.kt)("p",null,"Run the following command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose stop\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This will stop the containers")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose down\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This will stop and remove all the containers")))}p.isMDXComponent=!0}}]);