"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[500],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),f=l,d=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return n?a.createElement(d,r(r({ref:t},u),{},{components:n})):a.createElement(d,r({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const i={id:"schema-file",title:"Schema File",sidebar_position:2},r="Schema File Configuration",o={unversionedId:"configuration/schema-file",id:"configuration/schema-file",title:"Schema File",description:"This doc will guide on using the schema url configuration for types that",source:"@site/docs/configuration/schema-file.md",sourceDirName:"configuration",slug:"/configuration/schema-file",permalink:"/kafka-connect-azure-blob-storage/docs/configuration/schema-file",draft:!1,editUrl:"https://github.com/CoffeeBeansLabs/kafka-connect-azure-blob-storage/docs/configuration/schema-file.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"schema-file",title:"Schema File",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Configuration Properties",permalink:"/kafka-connect-azure-blob-storage/docs/configuration/documentation"},next:{title:"Quickstart",permalink:"/kafka-connect-azure-blob-storage/docs/quickstart"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Writing schema file",id:"writing-schema-file",level:2},{value:"Passing schema file",id:"passing-schema-file",level:2},{value:"Passing URL to schema",id:"passing-url-to-schema",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"schema-file-configuration"},"Schema File Configuration"),(0,l.kt)("p",null,"This doc will guide on using the schema url configuration for types that\ndo not have their own schema."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"Writing data to sink in ",(0,l.kt)("inlineCode",{parentName:"p"},"Avro")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Parquet")," format requires schema."),(0,l.kt)("p",null,"If incoming data is of following type then there is no need of\nspecifying the schema explicitly as it already gets the schema from schema registry:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Avro"),(0,l.kt)("li",{parentName:"ul"},"Protobuf"),(0,l.kt)("li",{parentName:"ul"},"Json with Schema Registry"),(0,l.kt)("li",{parentName:"ul"},"Json with embedded schema")),(0,l.kt)("p",null,"But for below formats there is not info about the schema to the connector:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Json without schema"),(0,l.kt)("li",{parentName:"ul"},"Json-String")),(0,l.kt)("p",null,"To be able to write data in either Avro or Parquet format we need to explicitly\nspecify the schema to the connector."),(0,l.kt)("p",null,"There are two ways you can specify the schema:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Pass path to the Avro schema file"),(0,l.kt)("li",{parentName:"ol"},"Pass the URL to the Avro schema file")),(0,l.kt)("h2",{id:"writing-schema-file"},"Writing schema file"),(0,l.kt)("p",null,"There are few points to be implemented before leveraging this featue:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"For field ",(0,l.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," should precede any other data type."),(0,l.kt)("p",{parentName:"li"},"For eg."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},'{"name": "uid",  "type": ["null", "string"], "default": null}\n')),(0,l.kt)("br",null)),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," should always be ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," for all optional fields"),(0,l.kt)("p",{parentName:"li"},"For eg."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},'{"name": "isSatisfied", "type": ["null", "boolean"], "default": null},\n')))),(0,l.kt)("p",null,"Here is a sample Avro schema file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{"namespace": "topics.avro",\n    "type": "record",\n    "name": "sample_schema",\n    "fields": [\n      {"name": "timestamp", "type": ["null", "long"], "default": null},\n      {"name": "uid",  "type": ["null", "string"], "default": null},\n      {"name": "isConditionSatisfied", "type": ["null", "boolean"], "default": null},\n      {"name": "partition", "type": ["null", "int"], "default": null},\n      {"name": "locationDetails", "type": {"name": "locationDetailsObj", "type": "record", "fields": [\n          {"name": "city", "type": ["null", "string"], "default": null},\n          {"name": "state", "type": ["null", "string"], "default": null},\n          {"name": "latitude", "type": ["null", "double"], "default": null},\n          {"name": "longitude", "type": ["null", "double"], "default": null},\n          {"name": "country", "type": ["null", "string"], "default": null},\n          {"name": "timezone", "type": ["null", "string"], "default": null}\n      ]}},\n      {"name": "analytics", "type": {"name": "analyticsObj", "type": "record", "fields": [\n          {"name": "analyticsChildObj", "type": ["null", "string"], "default": null}\n      ]}}\n    ]\n}\n')),(0,l.kt)("h2",{id:"passing-schema-file"},"Passing schema file"),(0,l.kt)("p",null,"If deploying using Docker image, you can copy the schema file in the image while building it."),(0,l.kt)("p",null,"For detailed instructions refer to this ",(0,l.kt)("a",{parentName:"p",href:"https://coffeebeanslabs.github.io/kafka-connect-azure-blob-storage/docs/deployment/kubernetes#copying-schema-files"},"doc")),(0,l.kt)("h2",{id:"passing-url-to-schema"},"Passing URL to schema"),(0,l.kt)("p",null,"If your schema is hosted at a remote service, you can pass the\nURL of that service."),(0,l.kt)("p",null,"Eg."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"topic-name.schema.url: https://some.host.com/path/to/schema\n")))}p.isMDXComponent=!0}}]);